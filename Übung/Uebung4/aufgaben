==Übung 4==

===Aufgabe 1===

<source lang="c">
#include <mpi.h>
#include <unistd.h>
#include <stdio.h>

/**
 * this is a little mpi and chich how-to
 *
 * ssh chiclogin1.informatik.tu-chemnitz.de
 *
 * nur einmalig:
 * module initadd comp/gcc/422
 * module initadd mpi/openmpi/gcc422
 *
 * programm aus dem afs in die aktuelle directory kopieren
 * (/afs/tu-chemnitz.de/home/urz/[anfangsbuchstabe-vom-kürzel]/[urz-kürzel]/...)
 *
 * compilieren: mpicc programm.c -o programmname
 * anfordern von Knoten: qsub -I -l nodes=X:ppn=1,walltime=00:20:00 -q short
 * starten: mpirun -np X ./programmname
 */
int main(int argc, char** argv)
{
    MPI_Init(&argc,&argv);
    int rank, comm_size;

    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &comm_size);

    char hostname[256];
    gethostname(hostname, 255);

    printf("Rang: %d, size: %d, hostname: %s", rank, comm_size, hostname);

    MPI_Finalize();
    return 0;
}

</source>

<source lang="c">
#include <mpi.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    MPI_Init(&argc,&argv);
    int rank, comm_size;
    char hostname[256];

    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &comm_size);

    char* hostnames;
    if(rank == 0) {
        hostnames = (char*) malloc(256*comm_size);
    }

    MPI_Gather(hostname, 256, MPI_CHAR, hostnames, 256, MPI_CHAR, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        int i;
        for (i = 0; i < comm_size; i++) {
            printf("process %d: host %s\n", i, &hostnames[i*256]);
        }
    }

    MPI_Finalize();
    return 0;
}
</source>

===Aufgabe 2===

<source lang="c">
//folgender code kann bei großen nachrichten blockieren (wenn der send-/empfangspuffer voll ist)
send()
receive()
</source>

;Lösungen
* MPI_Isend() und MPI_Irecv()
**<source lang="c">
	MPI_Isend();
	MPI_Irecv();
</source>
* MPI_Sendrecv()
**<source lang="c">
	MPI_sendrecv();
</source>
* reihenfolge von send() und receive() anpassen (nicht alle zuerst senden oder empfangen)
** zum Beispiel jeder Zweite in einer Kette erst senden, rest erst empfangen
** oder wenn ein Knoten ausreicht, kann auch lediglich in einem der Vorgang in anderer Reihenfolge ausgeführt werden
**<source lang="c">
if (rank%2 == 0) {
	MPI_send();
	MPI_recv();
} else {
	MPI_recv();
	MPI_send();	
}
</source>
